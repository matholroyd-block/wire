// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.dinosaurs.Dinosaur in squareup/dinosaurs/dinosaur.proto
import Foundation
import Wire

public struct Dinosaur {

    /**
     * Common name of this dinosaur, like "Stegosaurus".
     */
    public var name: String?
    /**
     * URLs with images of this dinosaur.
     */
    public var picture_urls: [String]
    public var length_meters: Double?
    public var mass_kilograms: Double?
    public var period: Period?
    public var unknownFields: Data = .init()

    public init(
        name: String? = nil,
        picture_urls: [String] = [],
        length_meters: Double? = nil,
        mass_kilograms: Double? = nil,
        period: Period? = nil
    ) {
        self.name = name
        self.picture_urls = picture_urls
        self.length_meters = length_meters
        self.mass_kilograms = mass_kilograms
        self.period = period
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Dinosaur : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Dinosaur : Hashable {
}
#endif

#if swift(>=5.5)
extension Dinosaur : Sendable {
}
#endif

extension Dinosaur : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.dinosaurs.Dinosaur"
    }
}

extension Dinosaur : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var name: String? = nil
        var picture_urls: [String] = []
        var length_meters: Double? = nil
        var mass_kilograms: Double? = nil
        var period: Period? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: name = try reader.decode(String.self)
            case 2: try reader.decode(into: &picture_urls)
            case 3: length_meters = try reader.decode(Double.self)
            case 4: mass_kilograms = try reader.decode(Double.self)
            case 5: period = try reader.decode(Period.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.name = name
        self.picture_urls = picture_urls
        self.length_meters = length_meters
        self.mass_kilograms = mass_kilograms
        self.period = period
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.name)
        try writer.encode(tag: 2, value: self.picture_urls)
        try writer.encode(tag: 3, value: self.length_meters)
        try writer.encode(tag: 4, value: self.mass_kilograms)
        try writer.encode(tag: 5, value: self.period)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension Dinosaur : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.name = try container.decodeIfPresent(String.self, forKey: "name")
        self.picture_urls = try container.decodeProtoArray(String.self, firstOfKeys: "pictureUrls", "picture_urls")
        self.length_meters = try container.decodeIfPresent(Double.self, firstOfKeys: "lengthMeters", "length_meters")
        self.mass_kilograms = try container.decodeIfPresent(Double.self, firstOfKeys: "massKilograms", "mass_kilograms")
        self.period = try container.decodeIfPresent(Period.self, forKey: "period")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        try container.encodeIfPresent(self.name, forKey: "name")
        if includeDefaults || !self.picture_urls.isEmpty {
            try container.encodeProtoArray(self.picture_urls, forKey: preferCamelCase ? "pictureUrls" : "picture_urls")
        }
        try container.encodeIfPresent(self.length_meters, forKey: preferCamelCase ? "lengthMeters" : "length_meters")
        try container.encodeIfPresent(self.mass_kilograms, forKey: preferCamelCase ? "massKilograms" : "mass_kilograms")
        try container.encodeIfPresent(self.period, forKey: "period")
    }
}
#endif
